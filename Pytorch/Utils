{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Utils","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNzBmvZ/UPJSxO2ijeBfF0V"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ALqpRN2db-6p","colab_type":"text"},"source":["Подключение необходимых библиотек"]},{"cell_type":"code","metadata":{"id":"1p1BfHAq5YNy","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599739748747,"user_tz":-180,"elapsed":3288,"user":{"displayName":"Sergey Milantev","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsdEbaHahoo0c_Mn7rYEdq8dkrmAjSykRTcWzfLQ=s64","userId":"04929025458703122590"}}},"source":["import numpy as np\n","import torch\n","from abc import ABC, abstractmethod"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"95gCAoxe5bZO","colab_type":"text"},"source":["# Расчет shape выхода"]},{"cell_type":"code","metadata":{"id":"fUp-oaqy5jvW","colab_type":"code","colab":{}},"source":["def calc_out_shape(input_matrix_shape, out_channels, kernel_size, stride, padding):\n","    batch_size, channels_count, input_height, input_width = input_matrix_shape\n","    output_height = (input_height + 2 * padding - (kernel_size - 1) - 1) // stride + 1\n","    output_width = (input_width + 2 * padding - (kernel_size - 1) - 1) // stride + 1\n","    return batch_size, out_channels, output_height, output_width"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SFyWHPMe6ey0","colab_type":"text"},"source":["# Сверточный слой"]},{"cell_type":"code","metadata":{"id":"xTUDuogM6hri","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599739752023,"user_tz":-180,"elapsed":664,"user":{"displayName":"Sergey Milantev","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsdEbaHahoo0c_Mn7rYEdq8dkrmAjSykRTcWzfLQ=s64","userId":"04929025458703122590"}}},"source":["class ABCConv2d(ABC):\n","    def __init__(self, in_channels, out_channels, kernel_size, stride):\n","        self.in_channels = in_channels\n","        self.out_channels = out_channels\n","        self.kernel_size = kernel_size\n","        self.stride = stride\n","\n","    def set_kernel(self, kernel):\n","        self.kernel = kernel\n","\n","    @abstractmethod\n","    def __call__(self, input_tensor):\n","        pass\n","\n","\n","class Conv2d(ABCConv2d):\n","    def __init__(self, in_channels, out_channels, kernel_size, stride):\n","        self.conv2d = torch.nn.Conv2d(in_channels, out_channels, kernel_size,\n","                                      stride, padding=0, bias=False)\n","\n","    def set_kernel(self, kernel):\n","        self.conv2d.weight.data = kernel\n","\n","    def __call__(self, input_tensor):\n","        return self.conv2d(input_tensor)\n","\n","\n","def create_and_call_conv2d_layer(conv2d_layer_class, stride, kernel, input_matrix):\n","    out_channels = kernel.shape[0]\n","    in_channels = kernel.shape[1]\n","    kernel_size = kernel.shape[2]\n","\n","    layer = conv2d_layer_class(in_channels, out_channels, kernel_size, stride)\n","    layer.set_kernel(kernel)\n","\n","    return layer(input_matrix)\n","\n","\n","def test_conv2d_layer(conv2d_layer_class, batch_size=2,\n","                      input_height=4, input_width=4, stride=2):\n","    kernel = torch.tensor(\n","        [[[[0., 1, 0],\n","           [1, 2, 1],\n","           [0, 1, 0]],\n","\n","          [[1, 2, 1],\n","           [0, 3, 3],\n","           [0, 1, 10]],\n","\n","          [[10, 11, 12],\n","           [13, 14, 15],\n","           [16, 17, 18]]]])\n","\n","    in_channels = kernel.shape[1]\n","\n","    input_tensor = torch.arange(0, batch_size * in_channels *\n","                                input_height * input_width,\n","                                out=torch.FloatTensor()) \\\n","        .reshape(batch_size, in_channels, input_height, input_width)\n","\n","    custom_conv2d_out = create_and_call_conv2d_layer(\n","        conv2d_layer_class, stride, kernel, input_tensor)\n","    conv2d_out = create_and_call_conv2d_layer(\n","        Conv2d, stride, kernel, input_tensor)\n","    return torch.allclose(custom_conv2d_out, conv2d_out)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"GFfUxGod7UAr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599739872964,"user_tz":-180,"elapsed":603,"user":{"displayName":"Sergey Milantev","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsdEbaHahoo0c_Mn7rYEdq8dkrmAjSykRTcWzfLQ=s64","userId":"04929025458703122590"}},"outputId":"404e573d-2094-4083-c59b-0e11884fc44e"},"source":["test_conv2d_layer(Conv2d)"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"aDp-_e-P7Cfb","colab_type":"text"},"source":["# Сверточный слой через циклы."]},{"cell_type":"code","metadata":{"id":"efKLV0Mv7CvB","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599739825505,"user_tz":-180,"elapsed":646,"user":{"displayName":"Sergey Milantev","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsdEbaHahoo0c_Mn7rYEdq8dkrmAjSykRTcWzfLQ=s64","userId":"04929025458703122590"}}},"source":["class Conv2dLoop(ABCConv2d):\n","    def __call__(self, input_tensor):\n","        result_shape = [input_tensor.shape[0],\n","                        self.out_channels,\n","                        int((input_tensor.shape[2] - self.kernel_size) / self.stride + 1),\n","                        int((input_tensor.shape[3] - self.kernel_size) / self.stride + 1)]\n","        result = torch.zeros(result_shape)\n","\n","        for picture_id in range(len(input_tensor)):  # Условие 3: По изображениям\n","            picture_x_shape = input_tensor[picture_id][0].shape[0]\n","            picture_y_shape = input_tensor[picture_id][0].shape[1]\n","            for x_stride in range(0, picture_x_shape, self.stride):  # OX\n","                for y_stride in range(0, picture_y_shape, self.stride):  # OY\n","                    kernel_sum = 0.0\n","                    layer_sum = 0.0\n","                    for kernel_id in range(len(self.kernel[0])):  # Условие 2: Цикл по ядрам\n","                        picture = input_tensor[picture_id][kernel_id]\n","                        if x_stride + self.stride < picture_x_shape and y_stride + self.stride < picture_y_shape:\n","                            x_indices = list(range(x_stride, x_stride + self.stride + 1))\n","                            y_idices = list(range(x_stride, x_stride + self.stride + 1))\n","                            window = picture[:, x_indices][y_idices, :]\n","                            kernel = self.kernel[0][kernel_id]\n","                            kernel_sum = sum(sum(kernel * window))\n","                        layer_sum += kernel_sum\n","                    if x_stride + self.stride < picture_x_shape and y_stride + self.stride < picture_y_shape:\n","                        result[picture_id][self.out_channels - 1][x_stride][y_stride] = layer_sum\n","        return result"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"rvidYstw7FuF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599739866175,"user_tz":-180,"elapsed":650,"user":{"displayName":"Sergey Milantev","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsdEbaHahoo0c_Mn7rYEdq8dkrmAjSykRTcWzfLQ=s64","userId":"04929025458703122590"}},"outputId":"67cd8327-bd10-4c1e-ab53-2d407509af18"},"source":["test_conv2d_layer(Conv2dLoop)"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":10}]}]}